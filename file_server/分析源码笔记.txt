

#include <stdio.h>   
#include <unistd.h>   
#include <sys/select.h>   
#include <errno.h>   
#include <sys/inotify.h>   

#define EVENT_NUM 12

char *event_str[EVENT_NUM] = 
{
    "IN_ACCESS",
    "IN_MODIFY",
    "IN_ATTRIB",
    "IN_CLOSE_WRITE",
    "IN_CLOSE_NOWRITE",
    "IN_OPEN",
    "IN_MOVED_FROM",
    "IN_MOVED_TO",
    "IN_CREATE",
    "IN_DELETE",
    "IN_DELETE_SELF",
    "IN_MOVE_SELF"
};
  
static void   _inotify_event_handler(struct inotify_event *event)      //从buf中取出一个事件。  
{   
         printf("log has been updated\n"); 
}   
  
int  main(int argc, char **argv)   
{   
	if (argc != 2) {   
		printf("Usage: %s <file/dir>\n", argv[0]);   
	return -1;   
  }   
  
  unsigned char buf[1024] = {0};   
  struct inotify_event *event = NULL;              

  int fd = inotify_init();                 //初始化
  int wd = inotify_add_watch(fd, argv[1], IN_ALL_EVENTS);                  //监控指定文件的ALL_EVENTS。
  
  for (;;) 
  {   
       fd_set fds;   
       FD_ZERO(&fds);                
       FD_SET(fd, &fds);   

       if (select(fd + 1, &fds, NULL, NULL, NULL) > 0)                //监控fd的事件。当有事件发生时，返回值>0
       {   
           int len, index = 0;   
           while (((len = read(fd, &buf, sizeof(buf))) < 0) && (errno == EINTR));       //没有读取到事件。
           while (index < len) 
           {   
                  event = (struct inotify_event *)(buf + index);  
				  for(i=0; i<EVENT_NUM; i++)
				  {
	                if((event->mask >> i) & 1)
	                {
	                    if(strcmp(event_str[i],"IN_DELETE_SELF")==0){
							fprintf(stdout, "%s --- %s\n", " ", event_str[i]);   
							_inotify_event_handler();//获取事件。    
	                    }else{
	                         fprintf(stdout, "%s --- %s\n", " ", event_str[i]);    
	                    }
	                }
	              }		                                                 
                  index += sizeof(struct inotify_event) + event->len;             //移动index指向下一个事件。
           }   
       }   
  }   
  
  inotify_rm_watch(fd, wd);              //删除对指定文件的监控。
   return 0;   
}
